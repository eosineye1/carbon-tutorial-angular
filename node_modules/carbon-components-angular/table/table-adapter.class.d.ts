/*!
 *
 * carbon-angular v0.0.0 | table-adapter.class.d.ts
 *
 * Copyright 2014, 2019 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * An abstract class that represents a cell in a table
 */
export declare abstract class TableCellAdapter {
    /**
     * The index of the cell in the table
     */
    cellIndex: number;
    /**
     * The number of columns spanned by this cell
     */
    colSpan: number;
}
/**
 * An abstract class that represents a row in a table
 */
export declare abstract class TableRowAdapter {
    /**
     * The index of the row in the table
     */
    rowIndex: number;
    /**
     * An array (or `HTMLCollection`) of `TableCellAdapter`s
     */
    cells: HTMLCollection | TableCellAdapter[];
}
/**
 * An abstract representation of a table that provides
 * a standard interface to query 2d tables for cell and row information.
 */
export declare abstract class TableAdapter {
    /**
     * The last acccessible column in the table
     */
    readonly lastColumnIndex: number;
    /**
     * The last accessible row in the table
     */
    readonly lastRowIndex: number;
    /**
     * Returns a cell from the table
     *
     * @param row index of the row
     * @param column index of the column
     */
    getCell(row: number, column: number): TableCellAdapter;
    /**
     * Returns a row from the table
     *
     * @param row index of the row
     */
    getRow(row: number): TableRowAdapter;
    /**
     * Finds the column index of a given cell
     *
     * @param cell the cell to search for
     */
    findColumnIndex(cell: TableCellAdapter): number;
    /**
     * Finds the row index of a given cell
     *
     * @param cell the cell to search for
     */
    findRowIndex(cell: TableCellAdapter): number;
    /**
     * Finds the row and column index of a given cell
     *
     * @param cell the cell to search for
     * @returns a tuple that follows the `[row, column]` convention
     */
    findIndex(cell: TableCellAdapter): [number, number];
}
/**
 * A concrete implementation of `TableAdapter`
 *
 * Provides standard and consistent access to table cells and rows
 */
export declare class TableDomAdapter implements TableAdapter {
    tableElement: HTMLTableElement;
    /**
     * The last acccessible column in the table
     */
    readonly lastColumnIndex: number;
    /**
     * The last accessible row in the table
     */
    readonly lastRowIndex: number;
    /**
     * `TableDomAdapter` works on a normal HTML table structure.
     * Custom tables that don't follow the standard structure should use a custom implementation of `TableAdapter`.
     *
     * The standard structure allows us to directly query rows for cells and indexes - though we do have to handle colspans specially.
     *
     * @param tableElement the root HTML table element.
     */
    constructor(tableElement: HTMLTableElement);
    /**
     * Returns a cell from the table taking colspans in to account.
     *
     * @param row index of the row
     * @param column index of the column
     */
    getCell(row: number, column: number): HTMLTableCellElement;
    /**
     * Returns a row from the table
     *
     * @param row index of the row
     */
    getRow(row: number): HTMLTableRowElement;
    /**
     * Finds the column index of a given cell
     *
     * @param cell the cell to search for
     */
    findColumnIndex(cell: HTMLTableCellElement): number;
    /**
     * Finds the row index of a given cell
     *
     * @param cell the cell to search for
     */
    findRowIndex(cell: HTMLTableCellElement): number;
    /**
     * Finds the row and column index of a given cell
     *
     * @param cell the cell to search for
     * @returns a tuple that follows the `[row, column]` convention
     */
    findIndex(cell: HTMLTableCellElement): [number, number];
}
