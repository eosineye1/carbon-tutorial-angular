/*!
 *
 * carbon-angular v0.0.0 | table-adapter.class.js
 *
 * Copyright 2014, 2019 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * An abstract class that represents a cell in a table
 */
var TableCellAdapter = /** @class */ (function () {
    function TableCellAdapter() {
    }
    return TableCellAdapter;
}());
export { TableCellAdapter };
/**
 * An abstract class that represents a row in a table
 */
var TableRowAdapter = /** @class */ (function () {
    function TableRowAdapter() {
    }
    return TableRowAdapter;
}());
export { TableRowAdapter };
/**
 * An abstract representation of a table that provides
 * a standard interface to query 2d tables for cell and row information.
 */
var TableAdapter = /** @class */ (function () {
    function TableAdapter() {
    }
    Object.defineProperty(TableAdapter.prototype, "lastColumnIndex", {
        /**
         * The last acccessible column in the table
         */
        get: function () { return; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableAdapter.prototype, "lastRowIndex", {
        /**
         * The last accessible row in the table
         */
        get: function () { return; },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a cell from the table
     *
     * @param row index of the row
     * @param column index of the column
     */
    TableAdapter.prototype.getCell = function (row, column) { return; };
    /**
     * Returns a row from the table
     *
     * @param row index of the row
     */
    TableAdapter.prototype.getRow = function (row) { return; };
    /**
     * Finds the column index of a given cell
     *
     * @param cell the cell to search for
     */
    TableAdapter.prototype.findColumnIndex = function (cell) { return; };
    /**
     * Finds the row index of a given cell
     *
     * @param cell the cell to search for
     */
    TableAdapter.prototype.findRowIndex = function (cell) { return; };
    /**
     * Finds the row and column index of a given cell
     *
     * @param cell the cell to search for
     * @returns a tuple that follows the `[row, column]` convention
     */
    TableAdapter.prototype.findIndex = function (cell) { return; };
    return TableAdapter;
}());
export { TableAdapter };
/**
 * A concrete implementation of `TableAdapter`
 *
 * Provides standard and consistent access to table cells and rows
 */
var TableDomAdapter = /** @class */ (function () {
    /**
     * `TableDomAdapter` works on a normal HTML table structure.
     * Custom tables that don't follow the standard structure should use a custom implementation of `TableAdapter`.
     *
     * The standard structure allows us to directly query rows for cells and indexes - though we do have to handle colspans specially.
     *
     * @param tableElement the root HTML table element.
     */
    function TableDomAdapter(tableElement) {
        this.tableElement = tableElement;
    }
    Object.defineProperty(TableDomAdapter.prototype, "lastColumnIndex", {
        /**
         * The last acccessible column in the table
         */
        get: function () {
            return this.tableElement.rows[0].cells.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableDomAdapter.prototype, "lastRowIndex", {
        /**
         * The last accessible row in the table
         */
        get: function () {
            return this.tableElement.rows.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a cell from the table taking colspans in to account.
     *
     * @param row index of the row
     * @param column index of the column
     */
    TableDomAdapter.prototype.getCell = function (row, column) {
        var baseRow = this.getRow(row);
        var baseCells = Array.from(baseRow.cells);
        // rows can have fewer total cells than the actual table
        // the model pretends all rows behave the same (with colspans > 1 being N cells long)
        // this maps that view to the HTML view (colspans > 1 are one element, so the array is shorter)
        var realIndex = 0;
        // i is only used for iterating the "cells"
        for (var i = 0; i < column;) {
            // skip the next N "cells"
            i += baseCells[realIndex].colSpan;
            // don't bump realIndex if i now exceeds the column we're shooting for
            if (i > column) {
                break;
            }
            // finally, increment realIndex (to keep it generally in step with i)
            realIndex++;
        }
        return baseCells[realIndex];
    };
    /**
     * Returns a row from the table
     *
     * @param row index of the row
     */
    TableDomAdapter.prototype.getRow = function (row) {
        return this.tableElement.rows[row];
    };
    /**
     * Finds the column index of a given cell
     *
     * @param cell the cell to search for
     */
    TableDomAdapter.prototype.findColumnIndex = function (cell) {
        var row = this.getRow(this.findRowIndex(cell));
        var cellIndex = 0;
        for (var _i = 0, _a = Array.from(row.cells); _i < _a.length; _i++) {
            var c = _a[_i];
            if (c === cell) {
                break;
            }
            cellIndex += c.colSpan;
        }
        return cellIndex;
    };
    /**
     * Finds the row index of a given cell
     *
     * @param cell the cell to search for
     */
    TableDomAdapter.prototype.findRowIndex = function (cell) {
        for (var _i = 0, _a = Array.from(this.tableElement.rows); _i < _a.length; _i++) {
            var row = _a[_i];
            if (row.contains(cell)) {
                return row.rowIndex;
            }
        }
    };
    /**
     * Finds the row and column index of a given cell
     *
     * @param cell the cell to search for
     * @returns a tuple that follows the `[row, column]` convention
     */
    TableDomAdapter.prototype.findIndex = function (cell) {
        return [this.findRowIndex(cell), this.findColumnIndex(cell)];
    };
    return TableDomAdapter;
}());
export { TableDomAdapter };
//# sourceMappingURL=table-adapter.class.js.map