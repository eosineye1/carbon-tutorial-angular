import Position, { position } from "./index";
describe("position", function () {
    beforeAll(function () {
        var style = document.createElement("style");
        style.innerHTML = "\n\t\t\t* {\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\t.reference {\n\t\t\t\twidth: 100px;\n\t\t\t\theight: 100px;\n\t\t\t\tborder: 1px solid blue;\n\t\t\t}\n\n\t\t\t.target {\n\t\t\t\twidth: 100px;\n\t\t\t\theight: 50px;\n\t\t\t\tborder: 1px solid gray;\n\t\t\t\tposition: absolute;\n\t\t\t}\n\t\t";
        document.head.appendChild(style);
    });
    var container;
    var target;
    var reference;
    beforeEach(function () {
        container = document.createElement("div");
        reference = document.createElement("div");
        reference.textContent = "reference element";
        reference.classList.add("reference");
        target = document.createElement("div");
        target.textContent = "target element";
        target.classList.add("target");
        container.appendChild(reference);
        container.appendChild(target);
        document.body.appendChild(container);
    });
    afterEach(function () {
        document.body.removeChild(container);
    });
    it("should provide an instance of Position", function () {
        expect(position instanceof Position).toBe(true);
    });
    // a bit of meta testing here
    it("should have an environment", function () {
        expect(target).toBeDefined();
        expect(reference).toBeDefined();
        expect(target.classList).toContain("target");
        expect(reference.classList).toContain("reference");
    });
    it("should position an element to the bottom", function () {
        var pos = position.findPosition(reference, target, "bottom");
        position.setElement(target, pos);
        expect(reference.getBoundingClientRect().bottom).toEqual(target.getBoundingClientRect().top);
    });
    it("should position an element to the left", function () {
        var pos = position.findPosition(reference, target, "left");
        position.setElement(target, pos);
        expect(reference.getBoundingClientRect().left).toEqual(target.getBoundingClientRect().right);
    });
    it("should position an element to the right", function () {
        var pos = position.findPosition(reference, target, "right");
        position.setElement(target, pos);
        expect(reference.getBoundingClientRect().right).toEqual(target.getBoundingClientRect().left);
    });
    it("should position an element to the top", function () {
        var pos = position.findPosition(reference, target, "top");
        position.setElement(target, pos);
        expect(reference.getBoundingClientRect().top).toEqual(target.getBoundingClientRect().bottom);
    });
    it("should add a custom placement", function () {
        var instance = new Position({
            "custom": function (referenceOffset, target, referenceRect) { return ({
                top: 42,
                left: 42
            }); }
        });
        var pos = instance.findPosition(reference, target, "custom");
        expect(pos).toEqual({ top: 42, left: 42 });
    });
    it("should position an element to the top of a given point", function () {
        var pos = position.findPositionAt({ top: 100, left: 100 }, target, "top");
        position.setElement(target, pos);
        expect(target.getBoundingClientRect().bottom).toEqual(100);
    });
    it("should position an element to the left of a given point", function () {
        var pos = position.findPositionAt({ top: 100, left: 100 }, target, "left");
        position.setElement(target, pos);
        expect(target.getBoundingClientRect().right).toEqual(100);
    });
    it("should position an element to the right of a given point", function () {
        var pos = position.findPositionAt({ top: 100, left: 100 }, target, "right");
        position.setElement(target, pos);
        expect(target.getBoundingClientRect().left).toEqual(100);
    });
    it("should position an element to the bottom of a given point", function () {
        var pos = position.findPositionAt({ top: 100, left: 100 }, target, "bottom");
        position.setElement(target, pos);
        expect(target.getBoundingClientRect().top).toEqual(100);
    });
});
//# sourceMappingURL=../src/index.spec.js.map