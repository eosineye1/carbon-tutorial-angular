import { NgModule, Component, Directive, ElementRef, Input } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var ZAxis20 = /** @class */ (function () {
    function ZAxis20() {
        this.focusable = false;
    }
    ZAxis20.decorators = [
        { type: Component, args: [{
                    selector: "ibm-icon-z-axis20",
                    template: "\n    <svg\n      ibmIconZAxis20\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                },] },
    ];
    ZAxis20.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        focusable: [{ type: Input }],
        innerClass: [{ type: Input }]
    };
    return ZAxis20;
}());
export { ZAxis20 };
var ZAxis20Directive = /** @class */ (function () {
    function ZAxis20Directive(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
    }
    ZAxis20Directive.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var domParser = new DOMParser();
        var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M26 22v3.586l-9-9V5.828l2.586 2.586L21 7l-5-5-5 5 1.414 1.414L15 5.828v10.758l-9 9V22H4v7h7v-2H7.414L16 18.414 24.586 27H21v2h7v-7h-2z\"></path></svg>";
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: 20,
            height: 20,
            viewBox: "0 0 32 32",
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            ZAxis20Directive.titleIdCounter++;
            title.setAttribute("id", "z-axis20-" + ZAxis20Directive.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "z-axis20-" + ZAxis20Directive.titleIdCounter);
        }
    };
    ZAxis20Directive.titleIdCounter = 0;
    ZAxis20Directive.decorators = [
        { type: Directive, args: [{
                    selector: "[ibmIconZAxis20]"
                },] },
    ];
    /** @nocollapse */
    ZAxis20Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ZAxis20Directive.propDecorators = {
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        ariaHidden: [{ type: Input }],
        title: [{ type: Input }],
        isFocusable: [{ type: Input }]
    };
    return ZAxis20Directive;
}());
export { ZAxis20Directive };
var ZAxis20Module = /** @class */ (function () {
    function ZAxis20Module() {
    }
    ZAxis20Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ZAxis20,
                        ZAxis20Directive
                    ],
                    exports: [
                        ZAxis20,
                        ZAxis20Directive
                    ]
                },] },
    ];
    return ZAxis20Module;
}());
export { ZAxis20Module };
//# sourceMappingURL=20.js.map