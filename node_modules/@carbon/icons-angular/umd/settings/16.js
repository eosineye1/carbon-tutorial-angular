(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (factory((global.CarbonIconsAngular = {}),global.ng.Core,global.CarbonIconHelpers));
}(this, (function (exports,core,iconHelpers) { 'use strict';

    var Settings16 = /** @class */ (function () {
        function Settings16() {
            this.focusable = false;
        }
        Settings16.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-settings16",
                        template: "\n    <svg\n      ibmIconSettings16\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Settings16.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Settings16;
    }());
    var Settings16Directive = /** @class */ (function () {
        function Settings16Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Settings16Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M13.5 8.4v-.8l1-.8c.4-.3.4-.9.2-1.3l-1.2-2c-.2-.3-.5-.5-.9-.5-.1 0-.2 0-.3.1l-1.2.4c-.2-.1-.4-.3-.7-.4l-.3-1.3c0-.5-.4-.8-.9-.8H6.8c-.5 0-.9.3-1 .8l-.2 1.3c-.3.1-.5.2-.7.3L3.7 3h-.3c-.4 0-.7.2-.9.5l-1.2 2c-.2.4-.1.9.3 1.3l.9.9v.8l-.9.7c-.4.3-.5.9-.2 1.3l1.2 2c.1.3.4.5.8.5.1 0 .2 0 .3-.1l1.2-.4c.2.1.4.3.7.4l.3 1.3c.1.5.5.8 1 .8h2.4c.5 0 .9-.3 1-.8l.3-1.3c.2-.1.4-.2.7-.4l1.2.4c.1 0 .2.1.3.1.4 0 .7-.2.9-.5l1.1-2c.2-.4.2-.9-.2-1.3l-1.1-.8zm-.9 3.6l-1.7-.6c-.4.3-.9.6-1.4.8L9.2 14H6.8l-.4-1.8c-.5-.2-.9-.5-1.4-.8l-1.6.6-1.2-2 1.4-1.2c-.1-.5-.1-1.1 0-1.6L2.2 6l1.2-2 1.7.6c.4-.4.9-.6 1.4-.8L6.8 2h2.4l.4 1.8c.5.2.9.5 1.4.8l1.6-.6 1.2 2-1.4 1.2c.1.5.1 1.1 0 1.6l1.4 1.2-1.2 2z\"></path><path d=\"M8 11c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3c0 1.6-1.3 3-3 3zm0-5c-1.1 0-2 .8-2 1.9V8c0 1.1.8 2 1.9 2H8c1.1 0 2-.8 2-1.9V8c0-1.1-.8-2-2-2 .1 0 0 0 0 0z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 16,
                height: 16,
                viewBox: "0 0 16 16",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Settings16Directive.titleIdCounter++;
                title.setAttribute("id", "settings16-" + Settings16Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "settings16-" + Settings16Directive.titleIdCounter);
            }
        };
        Settings16Directive.titleIdCounter = 0;
        Settings16Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconSettings16]"
                    },] },
        ];
        /** @nocollapse */
        Settings16Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Settings16Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Settings16Directive;
    }());
    var Settings16Module = /** @class */ (function () {
        function Settings16Module() {
        }
        Settings16Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Settings16,
                            Settings16Directive
                        ],
                        exports: [
                            Settings16,
                            Settings16Directive
                        ]
                    },] },
        ];
        return Settings16Module;
    }());

    exports.Settings16 = Settings16;
    exports.Settings16Directive = Settings16Directive;
    exports.Settings16Module = Settings16Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
