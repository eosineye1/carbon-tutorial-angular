(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (factory((global.CarbonIconsAngular = {}),global.ng.Core,global.CarbonIconHelpers));
}(this, (function (exports,core,iconHelpers) { 'use strict';

    var PartlyCloudy32 = /** @class */ (function () {
        function PartlyCloudy32() {
            this.focusable = false;
        }
        PartlyCloudy32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-partly-cloudy32",
                        template: "\n    <svg\n      ibmIconPartlyCloudy32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        PartlyCloudy32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return PartlyCloudy32;
    }());
    var PartlyCloudy32Directive = /** @class */ (function () {
        function PartlyCloudy32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        PartlyCloudy32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M21.743 18.692a6.05 6.05 0 0 0 1.057-1.086 5.998 5.998 0 1 0-10.733-4.445 7.557 7.557 0 0 0-5.716 5.088A5.993 5.993 0 0 0 8 30.005h11a5.985 5.985 0 0 0 2.743-11.313zM18 10.005a4.004 4.004 0 0 1 4 4 3.961 3.961 0 0 1-.8 2.4 4.012 4.012 0 0 1-.94.891 7.542 7.542 0 0 0-6.134-4.24A3.998 3.998 0 0 1 18 10.005zm1 18H8a3.993 3.993 0 0 1-.673-7.93l.663-.112.146-.656a5.496 5.496 0 0 1 10.729 0l.146.656.662.112a3.993 3.993 0 0 1-.673 7.93zm7-15h4v2h-4zM22.95 7.64l2.828-2.827 1.415 1.414-2.829 2.828zM17 2.005h2v4h-2zM8.808 6.227l1.414-1.414 2.829 2.828-1.415 1.414z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                PartlyCloudy32Directive.titleIdCounter++;
                title.setAttribute("id", "partly-cloudy32-" + PartlyCloudy32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "partly-cloudy32-" + PartlyCloudy32Directive.titleIdCounter);
            }
        };
        PartlyCloudy32Directive.titleIdCounter = 0;
        PartlyCloudy32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconPartlyCloudy32]"
                    },] },
        ];
        /** @nocollapse */
        PartlyCloudy32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        PartlyCloudy32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return PartlyCloudy32Directive;
    }());
    var PartlyCloudy32Module = /** @class */ (function () {
        function PartlyCloudy32Module() {
        }
        PartlyCloudy32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            PartlyCloudy32,
                            PartlyCloudy32Directive
                        ],
                        exports: [
                            PartlyCloudy32,
                            PartlyCloudy32Directive
                        ]
                    },] },
        ];
        return PartlyCloudy32Module;
    }());

    exports.PartlyCloudy32 = PartlyCloudy32;
    exports.PartlyCloudy32Directive = PartlyCloudy32Directive;
    exports.PartlyCloudy32Module = PartlyCloudy32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
