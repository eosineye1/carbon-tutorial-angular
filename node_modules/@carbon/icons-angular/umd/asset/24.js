(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (factory((global.CarbonIconsAngular = {}),global.ng.Core,global.CarbonIconHelpers));
}(this, (function (exports,core,iconHelpers) { 'use strict';

    var Asset24 = /** @class */ (function () {
        function Asset24() {
            this.focusable = false;
        }
        Asset24.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-asset24",
                        template: "\n    <svg\n      ibmIconAsset24\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Asset24.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Asset24;
    }());
    var Asset24Directive = /** @class */ (function () {
        function Asset24Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Asset24Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M12.075 24a4 4 0 1 1 4-4 4.004 4.004 0 0 1-4 4zm0-6a2 2 0 1 0 2 2 2.002 2.002 0 0 0-2-2z\"></path><path d=\"M30 6a4.004 4.004 0 0 0-4-4 3.949 3.949 0 0 0-1.854.477l-16.389 8.48a9.992 9.992 0 1 0 13.309 13.236l8.49-16.4A3.95 3.95 0 0 0 30 6zm-4-2a2 2 0 1 1-2 2 2.002 2.002 0 0 1 2-2zm-3.98 1.808c-.004.065-.02.126-.02.192a4.004 4.004 0 0 0 4 4c.065 0 .124-.016.188-.019l-4.332 8.362a10.017 10.017 0 0 0-8.215-8.196zM12 28a8 8 0 1 1 8-8 8.01 8.01 0 0 1-8 8z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 24,
                height: 24,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Asset24Directive.titleIdCounter++;
                title.setAttribute("id", "asset24-" + Asset24Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "asset24-" + Asset24Directive.titleIdCounter);
            }
        };
        Asset24Directive.titleIdCounter = 0;
        Asset24Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconAsset24]"
                    },] },
        ];
        /** @nocollapse */
        Asset24Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Asset24Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Asset24Directive;
    }());
    var Asset24Module = /** @class */ (function () {
        function Asset24Module() {
        }
        Asset24Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Asset24,
                            Asset24Directive
                        ],
                        exports: [
                            Asset24,
                            Asset24Directive
                        ]
                    },] },
        ];
        return Asset24Module;
    }());

    exports.Asset24 = Asset24;
    exports.Asset24Directive = Asset24Directive;
    exports.Asset24Module = Asset24Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
