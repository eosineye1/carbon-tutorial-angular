(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (factory((global.CarbonIconsAngular = {}),global.ng.Core,global.CarbonIconHelpers));
}(this, (function (exports,core,iconHelpers) { 'use strict';

    var CategoryAnd32 = /** @class */ (function () {
        function CategoryAnd32() {
            this.focusable = false;
        }
        CategoryAnd32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-category-and32",
                        template: "\n    <svg\n      ibmIconCategoryAnd32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        CategoryAnd32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return CategoryAnd32;
    }());
    var CategoryAnd32Directive = /** @class */ (function () {
        function CategoryAnd32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        CategoryAnd32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M4 30v-4h11v4h2v-4h11v4h2v-4a2 2 0 0 0-2-2H17v-5h-2v5H4a2 2 0 0 0-2 2v4zm16.695-16.014A10.08 10.08 0 0 0 21.946 10H23V8h-3v1a9.263 9.263 0 0 1-.664 3.27L16.65 8.883a5.126 5.126 0 0 0 2.144-2.37 3.252 3.252 0 0 0-.189-2.702 3.38 3.38 0 0 0-2.239-1.706 3.469 3.469 0 0 0-4.222 2.119c-.505 1.552.44 3.116 1.261 4.108a4.726 4.726 0 0 0-2.346 4.828A4.453 4.453 0 0 0 15.427 17h.006a5.784 5.784 0 0 0 3.971-1.423L20.532 17h2.552zM14.047 4.84A1.322 1.322 0 0 1 15.414 4a2.41 2.41 0 0 1 .521.058 1.402 1.402 0 0 1 .912.702 1.25 1.25 0 0 1 .079 1.042 3.687 3.687 0 0 1-1.682 1.593c-.66-.713-1.435-1.822-1.197-2.554zM15.432 15h-.004a2.443 2.443 0 0 1-2.392-2.15 2.826 2.826 0 0 1 1.81-3.026l3.312 4.179a3.885 3.885 0 0 1-2.726.997z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                CategoryAnd32Directive.titleIdCounter++;
                title.setAttribute("id", "category-and32-" + CategoryAnd32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "category-and32-" + CategoryAnd32Directive.titleIdCounter);
            }
        };
        CategoryAnd32Directive.titleIdCounter = 0;
        CategoryAnd32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconCategoryAnd32]"
                    },] },
        ];
        /** @nocollapse */
        CategoryAnd32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        CategoryAnd32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return CategoryAnd32Directive;
    }());
    var CategoryAnd32Module = /** @class */ (function () {
        function CategoryAnd32Module() {
        }
        CategoryAnd32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CategoryAnd32,
                            CategoryAnd32Directive
                        ],
                        exports: [
                            CategoryAnd32,
                            CategoryAnd32Directive
                        ]
                    },] },
        ];
        return CategoryAnd32Module;
    }());

    exports.CategoryAnd32 = CategoryAnd32;
    exports.CategoryAnd32Directive = CategoryAnd32Directive;
    exports.CategoryAnd32Module = CategoryAnd32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
